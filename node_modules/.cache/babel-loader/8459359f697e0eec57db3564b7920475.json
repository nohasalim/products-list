{"ast":null,"code":"'use strict';\n/* global __resourceQuery WorkerGlobalScope self */\n\n/* eslint prefer-destructuring: off */\n\nvar querystring = require('querystring');\n\nvar url = require('url');\n\nvar stripAnsi = require('strip-ansi');\n\nvar log = require('loglevel').getLogger('webpack-dev-server');\n\nvar socket = require('./socket');\n\nvar overlay = require('./overlay');\n\nfunction getCurrentScriptSource() {\n  // `document.currentScript` is the most accurate way to find the current script,\n  // but is not supported in all browsers.\n  if (document.currentScript) {\n    return document.currentScript.getAttribute('src');\n  } // Fall back to getting all scripts in the document.\n\n\n  var scriptElements = document.scripts || [];\n  var currentScript = scriptElements[scriptElements.length - 1];\n\n  if (currentScript) {\n    return currentScript.getAttribute('src');\n  } // Fail as there was no script to use.\n\n\n  throw new Error('[WDS] Failed to get current script source.');\n}\n\nvar urlParts;\nvar hotReload = true;\n\nif (typeof window !== 'undefined') {\n  var qs = window.location.search.toLowerCase();\n  hotReload = qs.indexOf('hotreload=false') === -1;\n}\n\nif (typeof __resourceQuery === 'string' && __resourceQuery) {\n  // If this bundle is inlined, use the resource query to get the correct url.\n  urlParts = url.parse(__resourceQuery.substr(1));\n} else {\n  // Else, get the url from the <script> this file was called with.\n  var scriptHost = getCurrentScriptSource(); // eslint-disable-next-line no-useless-escape\n\n  scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n  urlParts = url.parse(scriptHost || '/', false, true);\n}\n\nif (!urlParts.port || urlParts.port === '0') {\n  urlParts.port = self.location.port;\n}\n\nvar _hot = false;\nvar initial = true;\nvar currentHash = '';\nvar useWarningOverlay = false;\nvar useErrorOverlay = false;\nvar useProgress = false;\nvar INFO = 'info';\nvar WARNING = 'warning';\nvar ERROR = 'error';\nvar NONE = 'none'; // Set the default log level\n\nlog.setDefaultLevel(INFO); // Send messages to the outside, so plugins can consume it.\n\nfunction sendMsg(type, data) {\n  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {\n    self.postMessage({\n      type: \"webpack\".concat(type),\n      data: data\n    }, '*');\n  }\n}\n\nvar onSocketMsg = {\n  hot: function hot() {\n    _hot = true;\n    log.info('[WDS] Hot Module Replacement enabled.');\n  },\n  invalid: function invalid() {\n    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\n\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('Invalid');\n  },\n  hash: function hash(_hash) {\n    currentHash = _hash;\n  },\n  'still-ok': function stillOk() {\n    log.info('[WDS] Nothing changed.');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('StillOk');\n  },\n  'log-level': function logLevel(level) {\n    var hotCtx = require.context('webpack/hot', false, /^\\.\\/log$/);\n\n    if (hotCtx.keys().indexOf('./log') !== -1) {\n      hotCtx('./log').setLogLevel(level);\n    }\n\n    switch (level) {\n      case INFO:\n      case ERROR:\n        log.setLevel(level);\n        break;\n\n      case WARNING:\n        // loglevel's warning name is different from webpack's\n        log.setLevel('warn');\n        break;\n\n      case NONE:\n        log.disableAll();\n        break;\n\n      default:\n        log.error(\"[WDS] Unknown clientLogLevel '\".concat(level, \"'\"));\n    }\n  },\n  overlay: function overlay(value) {\n    if (typeof document !== 'undefined') {\n      if (typeof value === 'boolean') {\n        useWarningOverlay = false;\n        useErrorOverlay = value;\n      } else if (value) {\n        useWarningOverlay = value.warnings;\n        useErrorOverlay = value.errors;\n      }\n    }\n  },\n  progress: function progress(_progress) {\n    if (typeof document !== 'undefined') {\n      useProgress = _progress;\n    }\n  },\n  'progress-update': function progressUpdate(data) {\n    if (useProgress) log.info(\"[WDS] \".concat(data.percent, \"% - \").concat(data.msg, \".\"));\n    sendMsg('Progress', data);\n  },\n  ok: function ok() {\n    sendMsg('Ok');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n\n    reloadApp();\n  },\n  'content-changed': function contentChanged() {\n    log.info('[WDS] Content base changed. Reloading...');\n    self.location.reload();\n  },\n  warnings: function warnings(_warnings) {\n    log.warn('[WDS] Warnings while compiling.');\n\n    var strippedWarnings = _warnings.map(function (warning) {\n      return stripAnsi(warning);\n    });\n\n    sendMsg('Warnings', strippedWarnings);\n\n    for (var i = 0; i < strippedWarnings.length; i++) {\n      log.warn(strippedWarnings[i]);\n    }\n\n    if (useWarningOverlay) overlay.showMessage(_warnings);\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n\n    reloadApp();\n  },\n  errors: function errors(_errors) {\n    log.error('[WDS] Errors while compiling. Reload prevented.');\n\n    var strippedErrors = _errors.map(function (error) {\n      return stripAnsi(error);\n    });\n\n    sendMsg('Errors', strippedErrors);\n\n    for (var i = 0; i < strippedErrors.length; i++) {\n      log.error(strippedErrors[i]);\n    }\n\n    if (useErrorOverlay) overlay.showMessage(_errors);\n    initial = false;\n  },\n  error: function error(_error) {\n    log.error(_error);\n  },\n  close: function close() {\n    log.error('[WDS] Disconnected!');\n    sendMsg('Close');\n  }\n};\nvar hostname = urlParts.hostname;\nvar protocol = urlParts.protocol; // check ipv4 and ipv6 `all hostname`\n\nif (hostname === '0.0.0.0' || hostname === '::') {\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n  // eslint-disable-next-line no-bitwise\n  if (self.location.hostname && !!~self.location.protocol.indexOf('http')) {\n    hostname = self.location.hostname;\n  }\n} // `hostname` can be empty when the script path is relative. In that case, specifying\n// a protocol would result in an invalid URL.\n// When https is used in the app, secure websockets are always necessary\n// because the browser doesn't accept non-secure websockets.\n\n\nif (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n  protocol = self.location.protocol;\n}\n\nvar socketUrl = url.format({\n  protocol: protocol,\n  auth: urlParts.auth,\n  hostname: hostname,\n  port: urlParts.port,\n  // If sockPath is provided it'll be passed in via the __resourceQuery as a\n  // query param so it has to be parsed out of the querystring in order for the\n  // client to open the socket to the correct location.\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : querystring.parse(urlParts.path).sockPath || urlParts.path\n});\nsocket(socketUrl, onSocketMsg);\nvar isUnloading = false;\nself.addEventListener('beforeunload', function () {\n  isUnloading = true;\n});\n\nfunction reloadApp() {\n  if (isUnloading || !hotReload) {\n    return;\n  }\n\n  if (_hot) {\n    log.info('[WDS] App hot update...'); // eslint-disable-next-line global-require\n\n    var hotEmitter = require('webpack/hot/emitter');\n\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage(\"webpackHotUpdate\".concat(currentHash), '*');\n    }\n  } else {\n    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)\n\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== 'about:') {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}","map":{"version":3,"sources":["D:/products-list/node_modules/webpack-dev-server/client/index.js"],"names":["querystring","require","url","stripAnsi","log","getLogger","socket","overlay","getCurrentScriptSource","document","currentScript","getAttribute","scriptElements","scripts","length","Error","urlParts","hotReload","window","qs","location","search","toLowerCase","indexOf","__resourceQuery","parse","substr","scriptHost","replace","port","self","_hot","initial","currentHash","useWarningOverlay","useErrorOverlay","useProgress","INFO","WARNING","ERROR","NONE","setDefaultLevel","sendMsg","type","data","WorkerGlobalScope","postMessage","concat","onSocketMsg","hot","info","invalid","clear","hash","_hash","stillOk","logLevel","level","hotCtx","context","keys","setLogLevel","setLevel","disableAll","error","value","warnings","errors","progress","_progress","progressUpdate","percent","msg","ok","reloadApp","contentChanged","reload","_warnings","warn","strippedWarnings","map","warning","i","showMessage","_errors","strippedErrors","_error","close","hostname","protocol","socketUrl","format","auth","pathname","path","sockPath","isUnloading","addEventListener","hotEmitter","emit","rootWindow","intervalId","setInterval","applyReload","parent","clearInterval"],"mappings":"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","sourcesContent":["'use strict';\n/* global __resourceQuery WorkerGlobalScope self */\n\n/* eslint prefer-destructuring: off */\n\nvar querystring = require('querystring');\n\nvar url = require('url');\n\nvar stripAnsi = require('strip-ansi');\n\nvar log = require('loglevel').getLogger('webpack-dev-server');\n\nvar socket = require('./socket');\n\nvar overlay = require('./overlay');\n\nfunction getCurrentScriptSource() {\n  // `document.currentScript` is the most accurate way to find the current script,\n  // but is not supported in all browsers.\n  if (document.currentScript) {\n    return document.currentScript.getAttribute('src');\n  } // Fall back to getting all scripts in the document.\n\n\n  var scriptElements = document.scripts || [];\n  var currentScript = scriptElements[scriptElements.length - 1];\n\n  if (currentScript) {\n    return currentScript.getAttribute('src');\n  } // Fail as there was no script to use.\n\n\n  throw new Error('[WDS] Failed to get current script source.');\n}\n\nvar urlParts;\nvar hotReload = true;\n\nif (typeof window !== 'undefined') {\n  var qs = window.location.search.toLowerCase();\n  hotReload = qs.indexOf('hotreload=false') === -1;\n}\n\nif (typeof __resourceQuery === 'string' && __resourceQuery) {\n  // If this bundle is inlined, use the resource query to get the correct url.\n  urlParts = url.parse(__resourceQuery.substr(1));\n} else {\n  // Else, get the url from the <script> this file was called with.\n  var scriptHost = getCurrentScriptSource(); // eslint-disable-next-line no-useless-escape\n\n  scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n  urlParts = url.parse(scriptHost || '/', false, true);\n}\n\nif (!urlParts.port || urlParts.port === '0') {\n  urlParts.port = self.location.port;\n}\n\nvar _hot = false;\nvar initial = true;\nvar currentHash = '';\nvar useWarningOverlay = false;\nvar useErrorOverlay = false;\nvar useProgress = false;\nvar INFO = 'info';\nvar WARNING = 'warning';\nvar ERROR = 'error';\nvar NONE = 'none'; // Set the default log level\n\nlog.setDefaultLevel(INFO); // Send messages to the outside, so plugins can consume it.\n\nfunction sendMsg(type, data) {\n  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {\n    self.postMessage({\n      type: \"webpack\".concat(type),\n      data: data\n    }, '*');\n  }\n}\n\nvar onSocketMsg = {\n  hot: function hot() {\n    _hot = true;\n    log.info('[WDS] Hot Module Replacement enabled.');\n  },\n  invalid: function invalid() {\n    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\n\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('Invalid');\n  },\n  hash: function hash(_hash) {\n    currentHash = _hash;\n  },\n  'still-ok': function stillOk() {\n    log.info('[WDS] Nothing changed.');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('StillOk');\n  },\n  'log-level': function logLevel(level) {\n    var hotCtx = require.context('webpack/hot', false, /^\\.\\/log$/);\n\n    if (hotCtx.keys().indexOf('./log') !== -1) {\n      hotCtx('./log').setLogLevel(level);\n    }\n\n    switch (level) {\n      case INFO:\n      case ERROR:\n        log.setLevel(level);\n        break;\n\n      case WARNING:\n        // loglevel's warning name is different from webpack's\n        log.setLevel('warn');\n        break;\n\n      case NONE:\n        log.disableAll();\n        break;\n\n      default:\n        log.error(\"[WDS] Unknown clientLogLevel '\".concat(level, \"'\"));\n    }\n  },\n  overlay: function overlay(value) {\n    if (typeof document !== 'undefined') {\n      if (typeof value === 'boolean') {\n        useWarningOverlay = false;\n        useErrorOverlay = value;\n      } else if (value) {\n        useWarningOverlay = value.warnings;\n        useErrorOverlay = value.errors;\n      }\n    }\n  },\n  progress: function progress(_progress) {\n    if (typeof document !== 'undefined') {\n      useProgress = _progress;\n    }\n  },\n  'progress-update': function progressUpdate(data) {\n    if (useProgress) log.info(\"[WDS] \".concat(data.percent, \"% - \").concat(data.msg, \".\"));\n    sendMsg('Progress', data);\n  },\n  ok: function ok() {\n    sendMsg('Ok');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n\n    reloadApp();\n  },\n  'content-changed': function contentChanged() {\n    log.info('[WDS] Content base changed. Reloading...');\n    self.location.reload();\n  },\n  warnings: function warnings(_warnings) {\n    log.warn('[WDS] Warnings while compiling.');\n\n    var strippedWarnings = _warnings.map(function (warning) {\n      return stripAnsi(warning);\n    });\n\n    sendMsg('Warnings', strippedWarnings);\n\n    for (var i = 0; i < strippedWarnings.length; i++) {\n      log.warn(strippedWarnings[i]);\n    }\n\n    if (useWarningOverlay) overlay.showMessage(_warnings);\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n\n    reloadApp();\n  },\n  errors: function errors(_errors) {\n    log.error('[WDS] Errors while compiling. Reload prevented.');\n\n    var strippedErrors = _errors.map(function (error) {\n      return stripAnsi(error);\n    });\n\n    sendMsg('Errors', strippedErrors);\n\n    for (var i = 0; i < strippedErrors.length; i++) {\n      log.error(strippedErrors[i]);\n    }\n\n    if (useErrorOverlay) overlay.showMessage(_errors);\n    initial = false;\n  },\n  error: function error(_error) {\n    log.error(_error);\n  },\n  close: function close() {\n    log.error('[WDS] Disconnected!');\n    sendMsg('Close');\n  }\n};\nvar hostname = urlParts.hostname;\nvar protocol = urlParts.protocol; // check ipv4 and ipv6 `all hostname`\n\nif (hostname === '0.0.0.0' || hostname === '::') {\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n  // eslint-disable-next-line no-bitwise\n  if (self.location.hostname && !!~self.location.protocol.indexOf('http')) {\n    hostname = self.location.hostname;\n  }\n} // `hostname` can be empty when the script path is relative. In that case, specifying\n// a protocol would result in an invalid URL.\n// When https is used in the app, secure websockets are always necessary\n// because the browser doesn't accept non-secure websockets.\n\n\nif (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n  protocol = self.location.protocol;\n}\n\nvar socketUrl = url.format({\n  protocol: protocol,\n  auth: urlParts.auth,\n  hostname: hostname,\n  port: urlParts.port,\n  // If sockPath is provided it'll be passed in via the __resourceQuery as a\n  // query param so it has to be parsed out of the querystring in order for the\n  // client to open the socket to the correct location.\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : querystring.parse(urlParts.path).sockPath || urlParts.path\n});\nsocket(socketUrl, onSocketMsg);\nvar isUnloading = false;\nself.addEventListener('beforeunload', function () {\n  isUnloading = true;\n});\n\nfunction reloadApp() {\n  if (isUnloading || !hotReload) {\n    return;\n  }\n\n  if (_hot) {\n    log.info('[WDS] App hot update...'); // eslint-disable-next-line global-require\n\n    var hotEmitter = require('webpack/hot/emitter');\n\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage(\"webpackHotUpdate\".concat(currentHash), '*');\n    }\n  } else {\n    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)\n\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== 'about:') {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}"]},"metadata":{},"sourceType":"script"}